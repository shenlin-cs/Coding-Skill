画图.jar（netbeans jar导出包，可直接运行程序）
画图（直线、圆、椭圆、反走样）：
项目是用netbeans IDE，java语言写成。
已实现画图窗口、相应按钮、鼠标监控（橡皮筋技术画图）。
已实现 Breshenham算法画出任意斜率的直线；圆心位置和半径都任意的圆；中心位置、长半轴和短半轴都任意的椭圆。并与netbeans IDE系统调用相应算法同时作出比对。
已实现调用函数改变颜色、粗细线、橡皮擦（clearRect）、实心椭圆（fillRect）、矩形（fillOval）、正方形、多边形等。
暂未实现功能已在窗口按钮处标出。
以及实现了反走样算法。
主函数（test.java）;窗口及按钮算法（win.java）;具体实现算法（my.java）。

多边形填充：
用扫描线算法实现任意多边形(自交或非自交)填充。
因为java没有提供指针和结构体等，实现上可能与课本上的方法天壤之别，失去了学习教材的意义，并且我自己的java水平也不够。
该算法我便使用C语言 Visual Studio 2010进行编写，与课本上的算法4.1扫描转换多边形的扫描线思路基本一致。
但是运用鼠标点击信息的bug始终未能调试解决，便采用键盘键入点的个数和坐标的形式定位任意多边形，使任意多边形(自交或非自交)的填充都可以实现。
运行上drawColor函数中的system("pause");若取消注释，即可按任意键继续以观看画线过程。

种子填充算法填充圆：
运行后，在画板中左键点击一次为定圆心，再点击一次即确定半径，并用红线描画出该圆。
点击种子填充算法，提示选中圆内一点（种子），即由种子填充算法进行填充圆，默认黑色。
主要种子填充算法代码在zhztchView.cpp中，其余cpp为框架等。

多边形裁剪算法：
实现Weiler_Athenton裁剪算法对多边形进行裁剪但是只实现了任意矩形裁剪。

二维变换：
该程序实现了可以用画笔自己画图形进行变换，图形变换的主要代码在MyGraph.cpp，当然还有其他的头文件及CPP文件予以调用补充。
各种变换均可在选择相应按钮后，在下方输入框中输入操作数（如移动像素、放缩倍数、旋转角度和错切系数）有相应文字说明。
默认三角形坐标为（400,45；700,160；300,250）

正方体等轴测：
实现一个正方体的等轴侧，固定其一顶点在原点，故只需输入其顶点即可。

Bezier曲线：
鼠标在屏幕上单击左键绘制顶点，单击右键绘制曲线，可连续操作。


注：除画直线、圆、椭圆和反走样用jar包一并导出外，每一个实验内容都单独利用一个MFC实现。
若您采用VC6.0需添加所在文件夹中项目.dsw运行，若您采用VS2010需添加所在文件夹中项目.sln运行。所需头文件已存入文件夹。
因每一个实验的MFC框架都是当时独特精心制作，（部分界面框架是我在图形学社区其他大神的编辑基础上改造的）
或者有的实验用java实现，我自己的编程水平也不够，不便在短时间内合并，还望老师见谅！
而且每一个实验运行时都有相应的文字说明提示，在相应作业内容下也有示例截图与视频，谢谢老师！
									 ――计算161班 申林（QQ：1297744234）（电话：13718997266）