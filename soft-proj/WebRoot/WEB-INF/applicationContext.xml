<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			            http://www.springframework.org/schema/context
			            http://www.springframework.org/schema/context/spring-context-4.2.xsd
			            http://www.springframework.org/schema/mvc
			            http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
			            http://www.springframework.org/schema/tx
			            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
			            http://mybatis.org/schema/mybatis-spring 
			            http://mybatis.org/schema/mybatis-spring.xsd ">

	<!-- mybatis:scan会将org.fkit.mapper包里的所有接口当作mapper配置，之后可以自动引入mapper类 -->
	<mybatis:scan base-package="org.g7.mapper" />

	<!-- 扫描org.fkit包下面的java文件，有Spring的相关注解的类，则把这些类注册为Spring的bean -->
	<context:component-scan base-package="org.g7" />

	<!-- 使用PropertyOverrideConfigurer后处理器加载数据源参数 -->
	<context:property-override
		location="classpath:db.properties" />

	<!-- 配置c3p0数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" />

	<!-- 配置SqlSessionFactory，org.mybatis.spring.SqlSessionFactoryBean是Mybatis社区开发用于整合Spring的bean -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" />

	<!-- JDBC事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 启用支持annotation注解方式事务管理 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />
	<bean id="objectMapper"
		class="com.fasterxml.jackson.databind.ObjectMapper">
		<property name="serializationInclusion" value="NON_NULL" />
	</bean>

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper" ref="objectMapper" />
				<property name="prettyPrint" value="true" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
<!-- 	<mvc:interceptors>    
    <mvc:interceptor>    
        匹配的是url路径， 如果不配置或/**,将拦截所有的Controller  
        <mvc:mapping path="/**" />  
        /register 和 /login 不需要拦截  
        <mvc:exclude-mapping path="/register" />
        <mvc:exclude-mapping path="/login" />
        <mvc:exclude-mapping path="/dologin" />
        <mvc:exclude-mapping path="/index" />
        <mvc:exclude-mapping path="/loginbanner" />
        <mvc:exclude-mapping path="/css/**" />
        <mvc:exclude-mapping path="/images/**" />
        <mvc:exclude-mapping path="/js/**" />
        <bean class="org.g7.interceptor.TokenInterceptor"></bean>    
    </mvc:interceptor>  
    当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  
	</mvc:interceptors> -->
	
</beans>
